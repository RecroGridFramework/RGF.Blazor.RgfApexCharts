@inherits BaseChartComponent

<RgfChartComponent @ref="RgfChartRef" EntityParameters="EntityParameters">
    <ContentTemplate Context="RgfCharComp">
        <div class="rgf-apexchart-settings">
            <button type="button" class="accordion@(SettingsAccordionActive ? " active" : "")" @onclick="(arg) => OnSettingsAccordionToggled()">@RecroDict.GetRgfUiString("Settings")</button>
            <div class="panel@(SettingsAccordionActive ? " active" : "")">
                <EditForm EditContext="RgfCharComp.EditContext" OnValidSubmit="OnCreateChart">
                    <div class="rgfcharts-flex-container rgfcharts-justify-content-start">
                        <div class="p-1">
                            <div><strong>Y @RgfCharComp.GetRecroDictChart("Axis").ToLower()</strong></div>
                            <div><small>@RgfCharComp.GetRecroDictChart("SelectDataColumns")</small></div>
                        </div>
                        @for (int i = 0; i < RgfCharComp.ChartSettings.AggregationSettings.Columns.Count; i++)
                        {
                            var idx = i;
                            var col = RgfCharComp.ChartSettings.AggregationSettings.Columns[idx];
                            <div class="p-1">
                                <ValidationMessage For="@(() => col.Aggregate)" />
                                <ValidationMessage For="@(() => col.Id)" />
                                <InputSelect TValue="string" Value="col.Aggregate" ValueExpression="() => col.Aggregate"
                                             ValueChanged="(v) => { col.Aggregate = v; RgfCharComp.SetDataStatus(RgfProcessingStatus.Invalid); }">
                                    @foreach (var option in RgfAggregationColumn.AllowedAggregates)
                                    {
                                        <option value="@option">@option</option>
                                    }
                                </InputSelect>
                                @if (col.Aggregate != "Count")
                                {
                                    <InputSelect TValue="int" Value="col.Id" ValueExpression="() => col.Id"
                                                 ValueChanged="(v) => { col.Id = v; RgfCharComp.SetDataStatus(RgfProcessingStatus.Invalid); }">
                                        <option value="0"></option>
                                        @foreach (var option in RgfCharComp.ChartColumnsNumeric)
                                        {
                                            <option value="@option.Key">@option.Value</option>
                                        }
                                    </InputSelect>
                                }
                            </div>
                            @if (i != 0 || RgfCharComp.ChartSettings.AggregationSettings.Columns.Count > 1)
                            {
                                <div class="p-1">
                                    <button type="button" class="btn btn-sm btn-outline-primary" @onclick="(arg) => RgfCharComp.RemoveColumn(col)">-</button>
                                </div>
                            }
                        }
                        <div class="p-1">
                            <button type="button" class="btn btn-sm btn-outline-primary" @onclick="(arg) => RgfCharComp.AddColumn()">+</button>
                        </div>
                    </div>
                    <div class="rgfcharts-flex-container rgfcharts-justify-content-start">
                        <div class="p-1">
                            <div><strong>X @RgfCharComp.GetRecroDictChart("Axis").ToLower()</strong></div>
                            <div><small>@RgfCharComp.GetRecroDictChart("GroupValues")</small></div>
                        </div>
                        @for (int i = 0; i < RgfCharComp.ChartSettings.AggregationSettings.Groups.Count; i++)
                        {
                            var idx = i;
                            <div class="p-1">
                                <ValidationMessage For="@(() => RgfCharComp.ChartSettings.AggregationSettings.Groups[idx])" />
                                <InputSelect TValue="int" Value="RgfCharComp.ChartSettings.AggregationSettings.Groups[idx].Id" ValueExpression="() => RgfCharComp.ChartSettings.AggregationSettings.Groups[idx].Id"
                                             ValueChanged="(v) => { RgfCharComp.ChartSettings.AggregationSettings.Groups[idx].Id = v; RgfCharComp.SetDataStatus(RgfProcessingStatus.Invalid); }">
                                    <option value="0"></option>
                                    @foreach (var option in RgfCharComp.AllowedProperties.OrderBy(e => e.ColTitle).ToDictionary(p => p.Id, p => p.ColTitle))
                                    {
                                        <option value="@option.Key">@option.Value</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="p-1">
                                <button type="button" class="btn btn-sm btn-outline-primary" @onclick="(arg) => RgfCharComp.RemoveAtGroup(idx)">-</button>
                            </div>
                        }
                        <div class="p-1">
                            <button type="button" class="btn btn-sm btn-outline-primary" @onclick="(arg) => RgfCharComp.AddGroup()">+</button>
                        </div>
                    </div>
                    <div class="rgfcharts-flex-container rgfcharts-justify-content-start">
                        <div class="p-1">
                            <div><strong>@RgfCharComp.GetRecroDictChart("AdditionalGrouping")</strong></div>
                            <div><small>@RgfCharComp.GetRecroDictChart("SeriesGrouping")</small></div>
                        </div>
                        @for (int i = 0; i < RgfCharComp.ChartSettings.AggregationSettings.SubGroup.Count; i++)
                        {
                            var idx = i;
                            <div class="p-1">
                                <ValidationMessage For="@(() => RgfCharComp.ChartSettings.AggregationSettings.SubGroup[idx])" />
                                <InputSelect TValue="int" Value="RgfCharComp.ChartSettings.AggregationSettings.SubGroup[idx].Id" ValueExpression="() => RgfCharComp.ChartSettings.AggregationSettings.SubGroup[idx].Id"
                                             ValueChanged="(v) => { RgfCharComp.ChartSettings.AggregationSettings.SubGroup[idx].Id = v; RgfCharComp.SetDataStatus(RgfProcessingStatus.Invalid); }">
                                    <option value="0"></option>
                                    @foreach (var option in RgfCharComp.AllowedProperties.OrderBy(e => e.ColTitle).ToDictionary(p => p.Id, p => p.ColTitle))
                                    {
                                        <option value="@option.Key">@option.Value</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="p-1">
                                <button type="button" class="btn btn-sm btn-outline-primary" @onclick="(arg) => RgfCharComp.RemoveAtSubGroup(idx)">-</button>
                            </div>
                        }
                        <div class="p-1">
                            <button type="button" class="btn btn-sm btn-outline-primary" @onclick="(arg) => RgfCharComp.AddSubGroup()">+</button>
                        </div>
                    </div>

                    <div class="rgfcharts-flex-container rgfcharts-justify-content-start">
                        <div class="p-1">
                            <label class="col-form-label text-nowrap">@RecroDict.GetRgfUiString("ChartType")</label>
                            <InputSelect TValue="RgfChartSeriesType" Value="RgfCharComp.ChartSettings.SeriesType" ValueExpression="() => RgfCharComp.ChartSettings.SeriesType" ValueChanged="ChangeChartType">
                                @foreach (var option in Enum.GetValues(typeof(RgfChartSeriesType)).Cast<RgfChartSeriesType>())
                                {
                                    <option value="@option">@option</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="p-1">
                            <label class="col-form-label text-nowrap">@RecroDict.GetRgfUiString("Stacked")</label>
                            <InputCheckbox Value="RgfCharComp.ChartSettings.Stacked" ValueExpression="() => RgfCharComp.ChartSettings.Stacked" ValueChanged="ChangedStacked"
                                           disabled="@(RgfCharComp.ChartSettings.SeriesType != RgfChartSeriesType.Bar)" />
                        </div>
                        <div class="p-1">
                            <label class="col-form-label text-nowrap">@RecroDict.GetRgfUiString("Horizontal")</label>
                            <InputCheckbox Value="RgfCharComp.ChartSettings.Horizontal" ValueExpression="() => RgfCharComp.ChartSettings.Horizontal" ValueChanged="ChangedHorizontal"
                                           disabled="@(RgfCharComp.ChartSettings.SeriesType != RgfChartSeriesType.Bar)" />
                        </div>
                        <div class="p-1">
                            <label class="col-form-label text-nowrap">@RgfCharComp.GetRecroDictChart("Legend")</label>
                            <InputCheckbox Value="RgfCharComp.ChartSettings.Legend" ValueExpression="() => RgfCharComp.ChartSettings.Legend" ValueChanged="ChangedLegend" />
                        </div>
                        <div class="p-1">
                            <label class="col-form-label text-nowrap">@RgfCharComp.GetRecroDictChart("ShowDataLabels")</label>
                            <InputCheckbox Value="RgfCharComp.ChartSettings.ShowDataLabels" ValueExpression="() => RgfCharComp.ChartSettings.ShowDataLabels" ValueChanged="ChangedShowDataLabels" />
                        </div>
                    </div>
                    <div class="rgfcharts-flex-container rgfcharts-justify-content-start">
                        <div class="p-1">
                            <label class="col-form-label text-nowrap">@RecroDict.GetRgfUiString("Theme")</label>
                            <InputSelect TValue="Mode?" Value="ApexChartSettings.Options.Theme.Mode" ValueExpression="() => ApexChartSettings.Options.Theme.Mode" ValueChanged="ChangeTheme">
                                @foreach (var option in Enum.GetValues(typeof(Mode)).Cast<Mode>())
                                {
                                    <option value="@option">@option</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="p-1">
                            <label class="col-form-label text-nowrap">@RgfCharComp.GetRecroDictChart("Palette")</label>
                            <InputSelect TValue="string" Value="RgfCharComp.ChartSettings.Palette" ValueExpression="() => RgfCharComp.ChartSettings.Palette" ValueChanged="ChangePalette">
                                @foreach (var option in ColorPalettes)
                                {
                                    <option value="@option">@option</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="p-1">
                            <label class="form-label">@RecroDict.GetRgfUiString("Width")</label>
                            <InputNumber TValue="int?" style="width:5rem"
                                         Value="RgfCharComp.ChartSettings.Width" ValueExpression="() => RgfCharComp.ChartSettings.Width"
                                         ValueChanged="ChangedWidth" />
                        </div>
                        <div class="p-1">
                            <label class="form-label">@RecroDict.GetRgfUiString("Height")</label>
                            <InputNumber TValue="int?" style="width:5rem"
                                         Value="RgfCharComp.ChartSettings.Height" ValueExpression="() => RgfCharComp.ChartSettings.Height"
                                         ValueChanged="ChangedHeight" />
                        </div>
                    </div>

                    <div class="rgfcharts-flex-container rgfcharts-justify-content-start">
                        <div class="p-1">
                            <label class="col-form-label text-nowrap">@RecroDict.GetRgfUiString("Remark")</label>
                            <InputTextArea @bind-Value="RgfCharComp.ChartSettings.Remark" />
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
        <div id="@ContainerId">
            <div class="rgf-apexchart-header tab">
                <button type="button" class="tablinks@(ActiveTabIndex == RecroChartTab.Grid ? " active" : "")" @onclick="(e) => OnTabActivated(RecroChartTab.Grid)">@RgfCharComp.GetRecroDictChart("DataSet")</button>
                <button type="button" class="tablinks@(ActiveTabIndex == RecroChartTab.Chart ? " active" : "")" @onclick="(e) => OnTabActivated(RecroChartTab.Chart)">@RecroDict.GetRgfUiString("Chart")</button>
            </div>

            <div class="tabcontent@(ActiveTabIndex == RecroChartTab.Grid ? " active" : "")">
                @if (RgfCharComp.ChartDataGrid != null)
                {
                    @RgfCharComp.ChartDataGrid
                }
            </div>

            <div class="rgf-apexchart-content tabcontent@(ActiveTabIndex == RecroChartTab.Chart ? " active" : "")">
                <ApexChartComponent @ref=ApexChartRef ChartSettings="@ApexChartSettings" />
            </div>
        </div>
    </ContentTemplate>

    <FooterTemplate Context="RgfCharComp">
        <div class="rgfcharts-flex-container rgfcharts-justify-content-end">
            <div class="p-1">
                <button type="button" class="btn btn-sm btn-outline-primary" disabled="@(RgfCharComp.ChartStatus != RgfProcessingStatus.Valid)"
                        @onclick="(arg) => OnRedraw()">
                    @RecroDict.GetRgfUiString("Redraw")
                </button>
            </div>
            <div class="p-1">
                <button type="button" class="btn btn-sm btn-primary" style="min-width:4rem" disabled="@(RgfCharComp.ChartStatus != RgfProcessingStatus.Invalid)"
                        @onclick="(arg) => OnCreateChart()">
                    @RgfCharComp.GetRecroDictChart("CreateChart")
                </button>
            </div>
            <div class="p-1">
                <button type="button" class="btn btn-sm btn-primary" style="min-width:4rem" disabled="@(RgfCharComp.DataStatus != RgfProcessingStatus.Invalid)"
                        @onclick="(arg) => OnGetData()">
                    @RgfCharComp.GetRecroDictChart("DataSet")
                </button>
            </div>
            <div class="p-1">
                <button type="button" class="btn btn-sm btn-secondary" @onclick="RgfCharComp.OnClose" style="min-width:4rem">@RecroDict.GetRgfUiString("Close")</button>
            </div>
        </div>
    </FooterTemplate>
</RgfChartComponent>
