<RgfChartComponent @ref="_rgfChartRef" EntityParameters="EntityParameters">
    <ChartTemplate Context="RgfCharComp">
        <div style="overflow:hidden">
            <ApexChartComponent @ref=_chartRef ChartSettings="@_chartSettings"/>
        </div>
    </ChartTemplate>

    <FooterTemplate Context="RgfCharComp">
        <EditForm EditContext="_editContext" OnValidSubmit="Submit">
            <div class="rgfcharts-flex-container rgfcharts-justify-content-start">
                <div class="p-1">
                    <label class="col-form-label text-nowrap">X</label>
                    <InputSelect TValue="string" Value="AggregationSettings.Columns[0].Aggregate" ValueExpression="() => AggregationSettings.Columns[0].Aggregate" ValueChanged="(arg) => OnChangeAggregate(arg, AggregationSettings.Columns[0], 0)">
                        @foreach (var option in new string[] { "", "Count" })
                        {
                            <option value="@option">@option</option>
                        }
                    </InputSelect>
                    <InputSelect TValue="int" @bind-Value="AggregationSettings.Columns[0].PropertyId">
                        <option value="0"></option>
                        @foreach (var option in RgfCharComp.ChartColumns.OrderBy(e => e.ColTitle).ToDictionary(p => p.Id, p => p.ColTitle))
                        {
                            <option value="@option.Key">@option.Value</option>
                        }
                    </InputSelect>
                </div>
                @if (_isCount)
                {
                    <div class="p-1">
                        <label class="col-form-label text-nowrap">@RecroDict.GetRgfUiString("Group")</label>
                        <InputSelect TValue="int" @bind-Value="AggregationSettings.Columns[1].PropertyId">
                            <option value="0"></option>
                            @foreach (var option in RgfCharComp.ChartColumns.OrderBy(e => e.ColTitle).ToDictionary(p => p.Id, p => p.ColTitle))
                            {
                                <option value="@option.Key">@option.Value</option>
                            }
                        </InputSelect>
                    </div>
                }
                <div class="p-1">
                    <label class="form-label">Max.@RecroDict.GetRgfUiString("ItemCount")</label>
                    <InputNumber @bind-Value=@AggregationSettings.Take style="width:5rem" />
                </div>
            </div>
            <div class="rgfcharts-flex-container rgfcharts-justify-content-start">
                @if (!_isCount && ChartColumnsNumeric != null)
                {
                    <ValidationMessage For="@(() => AggregationSettings.Columns[1].PropertyId)" />
                    @for (int i = 1; i < AggregationSettings.Columns.Count(); i++)
                    {
                        var col = AggregationSettings.Columns[i];
                        <div class="p-1">
                            <label class="col-form-label text-nowrap">Y</label>
                            <InputSelect TValue="string" Value="col.Aggregate" ValueExpression="() => col.Aggregate" ValueChanged="(arg) => OnChangeAggregate(arg, col, i)">
                                @foreach (var option in new string[] { "Sum", "Avg", "Min", "Max" })
                                {
                                    <option value="@option">@option</option>
                                }
                            </InputSelect>
                            <InputSelect TValue="int" @bind-Value="col.PropertyId">
                                <option value="0"></option>
                                @foreach (var option in ChartColumnsNumeric)
                                {
                                    <option value="@option.Key">@option.Value</option>
                                }
                            </InputSelect>
                            @if (i != 1)
                            {
                                <button type="button" class="btn btn-sm btn-outline-primary" @onclick="(arg) => RemoveColumn(col)">-Y</button>
                            }
                        </div>
                    }
                    <div class="p-1">
                        <button type="button" class="btn btn-sm btn-outline-primary" @onclick="AddColumn">+Y</button>
                    </div>
                }
            </div>
            <div class="rgfcharts-flex-container rgfcharts-justify-content-start">
                <div class="p-1">
                    <label class="col-form-label text-nowrap">@RecroDict.GetRgfUiString("ChartType")</label>
                    <InputSelect TValue="SeriesType" Value="_chartSettings.SeriesType" ValueExpression="() => _chartSettings.SeriesType" ValueChanged="(arg) => { _chartSettings.SeriesType = arg; _ = UpdateChart(); }">
                        @foreach (var option in new SeriesType[] { SeriesType.Bar, SeriesType.Line, SeriesType.Pie, SeriesType.Donut })
                        {
                            <option value="@option">@option</option>
                        }
                    </InputSelect>
                </div>
                <div class="p-1">
                    <label class="col-form-label text-nowrap">@RecroDict.GetRgfUiString("Stacked")</label>
                    <InputCheckbox Value="_stacked" ValueExpression="() => _stacked" ValueChanged="(arg) => { _chartSettings.Options.Chart.Stacked = _stacked = arg; _ = UpdateChart(); }" />
                </div>
                <div class="p-1">
                    <label class="col-form-label text-nowrap">@RecroDict.GetRgfUiString("Horizontal")</label>
                    <InputCheckbox Value="_horizontal" ValueExpression="() => _horizontal" ValueChanged="(arg) => { _chartSettings.Options.PlotOptions.Bar.Horizontal = _horizontal = arg; _ = UpdateChart(); }" />
                </div>
                <div class="p-1">
                    <label class="col-form-label text-nowrap">@RecroDict.GetRgfUiString("Theme")</label>
                    <InputSelect TValue="Mode?" Value="_chartSettings.Options.Theme.Mode" ValueExpression="() => _chartSettings.Options.Theme.Mode" ValueChanged="(arg) => { _chartSettings.Options.Theme.Mode = arg; _ = UpdateChart(); }">
                        @foreach (var option in Enum.GetValues(typeof(Mode)).Cast<Mode>())
                        {
                            <option value="@option">@option</option>
                        }
                    </InputSelect>
                </div>
                <div class="p-1">
                    <label class="col-form-label text-nowrap">@RecroDict.GetRgfUiString("Palette")</label>
                    <InputSelect TValue="PaletteType?" Value="_chartSettings.Options.Theme.Palette" ValueExpression="() => _chartSettings.Options.Theme.Palette" ValueChanged="(arg) => { _chartSettings.Options.Theme.Palette = arg; _ = UpdateChart(); }">
                        @foreach (var option in Enum.GetValues(typeof(PaletteType)).Cast<PaletteType>())
                        {
                            <option value="@option">@option</option>
                        }
                    </InputSelect>
                </div>
                <div class="p-1">
                    <label class="form-label">@RecroDict.GetRgfUiString("Width")</label>
                    <InputNumber @bind-Value=@_chartSettings.Width style="width:5rem" />
                </div>
                <div class="p-1">
                    <label class="form-label">@RecroDict.GetRgfUiString("Height")</label>
                    <InputNumber @bind-Value=@_chartSettings.Height style="width:5rem" />
                </div>
            </div>
            <div class="rgfcharts-flex-container rgfcharts-justify-content-end">
                <div class="p-1">
                    <button type="button" class="btn btn-sm btn-outline-primary" @onclick="UpdateSize">@RecroDict.GetRgfUiString("Redraw")</button>
                </div>
                <div class="p-1">
                    <button type="submit" class="btn btn-sm btn-primary" style="min-width:4rem">@RecroDict.GetRgfUiString("Create")</button>
                </div>
                <div class="p-1">
                    <button type="button" class="btn btn-sm btn-secondary" @onclick="RgfCharComp.OnClose" style="min-width:4rem">@RecroDict.GetRgfUiString("Close")</button>
                </div>
            </div>
        </EditForm>
    </FooterTemplate>
</RgfChartComponent>

@code {

    [Parameter, EditorRequired]
    public RgfEntityParameters EntityParameters { get; set; } = null!;
}